<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>MuseQuill.ink - Book Planner</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f5f5;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            text-align: center;
            margin-bottom: 40px;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .header h1 {
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .header p {
            color: #7f8c8d;
            font-size: 18px;
        }

        .wizard {
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .step-indicator {
            display: flex;
            background: #ecf0f1;
            padding: 0;
        }

        .step {
            flex: 1;
            padding: 15px;
            text-align: center;
            background: #bdc3c7;
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: background 0.3s;
        }

        .step.active {
            background: #3498db;
        }

        .step.completed {
            background: #27ae60;
        }

        .step-content {
            padding: 40px;
            min-height: 500px;
        }

        .step-panel {
            display: none;
        }

        .step-panel.active {
            display: block;
        }

        .step-title {
            font-size: 24px;
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .step-description {
            color: #7f8c8d;
            margin-bottom: 30px;
            font-size: 16px;
        }

        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }

        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #ecf0f1;
            border-radius: 6px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        .form-group input:focus,
        .form-group select:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #3498db;
        }

        .form-group textarea {
            resize: vertical;
            min-height: 100px;
        }

        .checkbox-group {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 10px;
            margin-top: 10px;
        }

        .checkbox-item {
            display: flex;
            align-items: center;
            padding: 8px;
            border: 1px solid #ecf0f1;
            border-radius: 4px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .checkbox-item:hover {
            background-color: #f8f9fa;
        }

        .checkbox-item input[type="checkbox"] {
            margin-right: 8px;
            width: auto;
        }

        .recommendation-box {
            background: #e8f6f3;
            border: 1px solid #16a085;
            border-radius: 6px;
            padding: 15px;
            margin: 20px 0;
        }

        .recommendation-box h4 {
            color: #16a085;
            margin-bottom: 10px;
        }

        .recommendation-tags {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }

        .tag {
            background: #16a085;
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
        }

        .warning-box {
            background: #fff3cd;
            border: 1px solid #ffc107;
            border-radius: 6px;
            padding: 15px;
            margin: 20px 0;
        }

        .warning-box h4 {
            color: #856404;
            margin-bottom: 10px;
        }

        .navigation {
            display: flex;
            justify-content: space-between;
            padding: 20px 40px;
            background: #f8f9fa;
            border-top: 1px solid #ecf0f1;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
        }

        .btn-primary {
            background: #3498db;
            color: white;
        }

        .btn-primary:hover {
            background: #2980b9;
        }

        .btn-secondary {
            background: #95a5a6;
            color: white;
        }

        .btn-secondary:hover {
            background: #7f8c8d;
        }

        .btn-success {
            background: #27ae60;
            color: white;
            font-size: 18px;
            padding: 15px 30px;
        }

        .btn-success:hover {
            background: #229954;
        }

        .btn:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 40px;
        }

        .spinner {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 20px;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        .success-message {
            display: none;
            text-align: center;
            padding: 40px;
            color: #27ae60;
        }

        .metadata-info {
            font-size: 12px;
            color: #7f8c8d;
            margin-top: 5px;
        }

        .help-text {
            font-size: 14px;
            color: #7f8c8d;
            font-style: italic;
            margin-top: 5px;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }

            .step-content {
                padding: 20px;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .step-indicator {
                flex-direction: column;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>üñãÔ∏è MuseQuill.ink Book Planner</h1>
            <p>Define your book parameters and let AI help you create your masterpiece</p>
        </div>

        <div class="wizard">
            <div class="step-indicator">
                <div class="step active" data-step="1">1. Book Basics</div>
                <div class="step" data-step="2">2. Story Structure</div>
                <div class="step" data-step="3">3. Characters & World</div>
                <div class="step" data-step="4">4. Writing Style</div>
                <div class="step" data-step="5">5. Audience & Publishing</div>
                <div class="step" data-step="6">6. AI Assistance</div>
            </div>

            <div class="step-content">
                <!-- Step 1: Book Basics -->
                <div class="step-panel active" data-step="1">
                    <h2 class="step-title">Book Basics</h2>
                    <p class="step-description">Define the core concept and scope of your book</p>

                    <div class="form-grid">
                        <div class="form-group">
                            <label for="title">Book Title *</label>
                            <input type="text" id="title" name="title" placeholder="Enter your book title..." required>
                            <div class="help-text">This can be changed later if you're not sure</div>
                        </div>

                        <div class="form-group">
                            <label for="subtitle">Subtitle (Optional)</label>
                            <input type="text" id="subtitle" name="subtitle" placeholder="Enter subtitle...">
                        </div>

                        <div class="form-group">
                            <label for="genre">Primary Genre *</label>
                            <select id="genre" name="genre" required>
                                <option value="">Select a genre...</option>
                            </select>
                            <div class="metadata-info" id="genre-metadata"></div>
                        </div>

                        <div class="form-group">
                            <label for="sub_genre">Sub-Genre (Optional)</label>
                            <select id="sub_genre" name="sub_genre">
                                <option value="">Select a sub-genre...</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="length">Target Length *</label>
                            <select id="length" name="length" required>
                                <option value="">Select target length...</option>
                            </select>
                            <div class="metadata-info" id="length-metadata"></div>
                        </div>

                        <div class="form-group">
                            <label for="description">Book Description</label>
                            <textarea id="description" name="description"
                                placeholder="Briefly describe what your book will be about..."></textarea>
                        </div>
                    </div>

                    <div id="recommendations-1" class="recommendation-box" style="display: none;">
                        <h4>üí° Recommendations based on your genre:</h4>
                        <div class="recommendation-tags" id="genre-recommendations"></div>
                    </div>
                </div>

                <!-- Step 2: Story Structure -->
                <div class="step-panel" data-step="2">
                    <h2 class="step-title">Story Structure</h2>
                    <p class="step-description">Choose how your story will be organized and paced</p>

                    <div class="form-grid">
                        <div class="form-group">
                            <label for="structure">Story Structure *</label>
                            <select id="structure" name="structure" required>
                                <option value="">Select a structure...</option>
                            </select>
                            <div class="metadata-info" id="structure-metadata"></div>
                        </div>

                        <div class="form-group">
                            <label for="plot_type">Basic Plot Type</label>
                            <select id="plot_type" name="plot_type">
                                <option value="">Select a plot type...</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="pov">Point of View *</label>
                            <select id="pov" name="pov" required>
                                <option value="">Select POV...</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="pacing">Story Pacing</label>
                            <select id="pacing" name="pacing">
                                <option value="">Select pacing...</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Types of Conflict (Select up to 3)</label>
                        <div class="checkbox-group" id="conflict-types">
                            <!-- Populated by JavaScript -->
                        </div>
                    </div>
                </div>

                <!-- Step 3: Characters & World -->
                <div class="step-panel" data-step="3">
                    <h2 class="step-title">Characters & World</h2>
                    <p class="step-description">Define your main characters and story setting</p>

                    <div class="form-grid">
                        <div class="form-group">
                            <label for="main_character_role">Main Character Type *</label>
                            <select id="main_character_role" name="main_character_role" required>
                                <option value="">Select character role...</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="character_archetype">Character Archetype</label>
                            <select id="character_archetype" name="character_archetype">
                                <option value="">Select archetype...</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="world_type">World Setting *</label>
                            <select id="world_type" name="world_type" required>
                                <option value="">Select world type...</option>
                            </select>
                        </div>

                        <div class="form-group" id="magic-system-group" style="display: none;">
                            <label for="magic_system">Magic System</label>
                            <select id="magic_system" name="magic_system">
                                <option value="">Select magic system...</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="technology_level">Technology Level</label>
                            <select id="technology_level" name="technology_level">
                                <option value="">Select tech level...</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Step 4: Writing Style -->
                <div class="step-panel" data-step="4">
                    <h2 class="step-title">Writing Style</h2>
                    <p class="step-description">Define your writing approach and tone</p>

                    <div class="form-grid">
                        <div class="form-group">
                            <label for="writing_style">Writing Style *</label>
                            <select id="writing_style" name="writing_style" required>
                                <option value="">Select writing style...</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="tone">Overall Tone *</label>
                            <select id="tone" name="tone" required>
                                <option value="">Select tone...</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="complexity">Content Complexity</label>
                            <select id="complexity" name="complexity">
                                <option value="">Select complexity...</option>
                                <option value="very_easy">Very Easy</option>
                                <option value="easy">Easy</option>
                                <option value="moderate">Moderate</option>
                                <option value="challenging">Challenging</option>
                                <option value="very_challenging">Very Challenging</option>
                                <option value="expert_level">Expert Level</option>
                            </select>
                        </div>
                    </div>
                </div>

                <!-- Step 5: Audience & Publishing -->
                <div class="step-panel" data-step="5">
                    <h2 class="step-title">Audience & Publishing</h2>
                    <p class="step-description">Define your target audience and publishing goals</p>

                    <div class="form-grid">
                        <div class="form-group">
                            <label for="age_group">Target Age Group *</label>
                            <select id="age_group" name="age_group" required>
                                <option value="">Select age group...</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="audience_type">Target Audience *</label>
                            <select id="audience_type" name="audience_type" required>
                                <option value="">Select audience...</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="reading_level">Reading Level</label>
                            <select id="reading_level" name="reading_level">
                                <option value="">Select reading level...</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="publication_route">Publishing Goal *</label>
                            <select id="publication_route" name="publication_route" required>
                                <option value="">Select publishing route...</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>Content Warnings (if any)</label>
                        <div class="checkbox-group" id="content-warnings">
                            <!-- Populated by JavaScript -->
                        </div>
                    </div>
                </div>

                <!-- Step 6: AI Assistance -->
                <div class="step-panel" data-step="6">
                    <h2 class="step-title">AI Assistance</h2>
                    <p class="step-description">Configure how MuseQuill AI will help you write</p>

                    <div class="form-grid">
                        <div class="form-group">
                            <label for="ai_assistance_level">AI Assistance Level *</label>
                            <select id="ai_assistance_level" name="ai_assistance_level" required>
                                <option value="">Select assistance level...</option>
                            </select>
                            <div class="help-text">Higher levels provide more AI suggestions and automation</div>
                        </div>

                        <div class="form-group">
                            <label for="research_priority">Research Importance</label>
                            <select id="research_priority" name="research_priority">
                                <option value="">Select research priority...</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="writing_schedule">Preferred Writing Schedule</label>
                            <select id="writing_schedule" name="writing_schedule">
                                <option value="">Select schedule...</option>
                            </select>
                        </div>

                        <div class="form-group">
                            <label for="additional_notes">Additional Notes</label>
                            <textarea id="additional_notes" name="additional_notes"
                                placeholder="Any additional requirements or preferences..."></textarea>
                        </div>
                    </div>
                </div>
            </div>

            <div id="validation-warnings"></div>

            <div class="navigation">
                <button type="button" class="btn btn-secondary" id="prev-btn" style="display: none;">Previous</button>
                <button type="button" class="btn btn-primary" id="next-btn">Next</button>
                <button type="button" class="btn btn-success" id="submit-btn" style="display: none;">Create My Book
                    Plan</button>
            </div>
        </div>

        <div class="loading" id="loading">
            <div class="spinner"></div>
            <h3>Creating your book plan...</h3>
            <p>Our AI agents are analyzing your preferences and creating a personalized writing plan.</p>
        </div>

        <div class="success-message" id="success">
            <h2>üéâ Book Plan Created Successfully!</h2>
            <p>Your personalized book planning session is ready. Redirecting to your writing dashboard...</p>
        </div>
    </div>

    <script>
        class BookPlannerWizard {
            constructor() {
                this.currentStep = 1;
                this.maxSteps = 6;
                this.formData = {};
                this.enumData = {};
                this.apiBaseUrl = 'http://localhost:8000/api';  // Will be configurable
                
                this.init();
            }

            async init() {
                await this.loadEnumData();
                this.populateFormFields();
                this.bindEvents();
                this.updateStepDisplay();
            }

            async loadEnumData() {
                try {
                    const response = await fetch(`${this.apiBaseUrl}/enums`);
                    this.enumData = await response.json();
                } catch (error) {
                    console.error('Failed to load enum data:', error);
                    // Fallback to minimal data for development
                    this.enumData = this.getFallbackEnumData();
                }
            }

            getFallbackEnumData() {
                return {
                    GenreType: [
                        ['fantasy', 'Fantasy'],
                        ['science_fiction', 'Science Fiction'],
                        ['mystery', 'Mystery'],
                        ['romance', 'Romance'],
                        ['business', 'Business'],
                        ['self_help', 'Self Help']
                    ],
                    StoryStructure: [
                        ['three_act', 'Three-Act Structure'],
                        ['hero_journey', "Hero's Journey"],
                        ['save_the_cat', 'Save the Cat']
                    ],
                    BookLength: [
                        ['novella', 'Novella (17,500-40,000 words)'],
                        ['standard_novel', 'Standard Novel (60,000-90,000 words)'],
                        ['long_novel', 'Long Novel (90,000-120,000 words)']
                    ]
                };
            }

            populateFormFields() {
                // Populate all select fields with enum data
                this.populateSelect('genre', 'GenreType');
                this.populateSelect('sub_genre', 'SubGenre');
                this.populateSelect('length', 'BookLength');
                this.populateSelect('structure', 'StoryStructure');
                this.populateSelect('plot_type', 'PlotType');
                this.populateSelect('pov', 'NarrativePOV');
                this.populateSelect('pacing', 'PacingType');
                this.populateSelect('main_character_role', 'CharacterRole');
                this.populateSelect('character_archetype', 'CharacterArchetype');
                this.populateSelect('world_type', 'WorldType');
                this.populateSelect('magic_system', 'MagicSystemType');
                this.populateSelect('technology_level', 'TechnologyLevel');
                this.populateSelect('writing_style', 'WritingStyle');
                this.populateSelect('tone', 'ToneType');
                this.populateSelect('age_group', 'AgeGroup');
                this.populateSelect('audience_type', 'AudienceType');
                this.populateSelect('reading_level', 'ReadingLevel');
                this.populateSelect('publication_route', 'PublicationRoute');
                this.populateSelect('ai_assistance_level', 'AIAssistanceLevel');
                this.populateSelect('research_priority', 'ResearchPriority');
                this.populateSelect('writing_schedule', 'WritingSchedule');

                // Populate checkbox groups
                this.populateCheckboxGroup('conflict-types', 'ConflictType');
                this.populateCheckboxGroup('content-warnings', 'ContentWarning');
            }

            populateSelect(selectId, enumName) {
                const select = document.getElementById(selectId);
                const enumValues = this.enumData[enumName] || [];
                
                enumValues.forEach(([value, label]) => {
                    const option = document.createElement('option');
                    option.value = value;
                    option.textContent = label;
                    select.appendChild(option);
                });
            }

            populateCheckboxGroup(containerId, enumName) {
                const container = document.getElementById(containerId);
                const enumValues = this.enumData[enumName] || [];
                
                enumValues.forEach(([value, label]) => {
                    const checkboxItem = document.createElement('div');
                    checkboxItem.className = 'checkbox-item';
                    checkboxItem.innerHTML = `
                        <input type="checkbox" id="${value}" name="${containerId}" value="${value}">
                        <label for="${value}">${label}</label>
                    `;
                    container.appendChild(checkboxItem);
                });
            }

            bindEvents() {
                // Navigation buttons
                document.getElementById('next-btn').addEventListener('click', () => this.nextStep());
                document.getElementById('prev-btn').addEventListener('click', () => this.prevStep());
                document.getElementById('submit-btn').addEventListener('click', () => this.submitForm());

                // Step indicator clicks
                document.querySelectorAll('.step').forEach(step => {
                    step.addEventListener('click', (e) => {
                        const stepNum = parseInt(e.target.dataset.step);
                        if (stepNum <= this.currentStep || this.isStepCompleted(stepNum - 1)) {
                            this.goToStep(stepNum);
                        }
                    });
                });

                // Form field changes
                document.getElementById('genre').addEventListener('change', (e) => {
                    this.onGenreChange(e.target.value);
                });

                document.getElementById('world_type').addEventListener('change', (e) => {
                    this.onWorldTypeChange(e.target.value);
                });

                // Real-time validation
                document.querySelectorAll('input, select, textarea').forEach(field => {
                    field.addEventListener('change', () => this.validateCurrentStep());
                });
            }

            onGenreChange(genre) {
                // Show recommendations based on genre
                this.showGenreRecommendations(genre);
                
                // Auto-populate sub-genre options
                this.updateSubGenreOptions(genre);
            }

            onWorldTypeChange(worldType) {
                // Show/hide magic system field based on world type
                const magicGroup = document.getElementById('magic-system-group');
                const fantasyWorlds = ['high_fantasy', 'low_fantasy', 'urban_fantasy'];
                
                if (fantasyWorlds.includes(worldType)) {
                    magicGroup.style.display = 'block';
                } else {
                    magicGroup.style.display = 'none';
                    document.getElementById('magic_system').value = '';
                }
            }

            showGenreRecommendations(genre) {
                // This would call the API for recommendations
                // For now, show a simple message
                const recommendationsBox = document.getElementById('recommendations-1');
                const tagsContainer = document.getElementById('genre-recommendations');
                
                if (genre) {
                    recommendationsBox.style.display = 'block';
                    tagsContainer.innerHTML = `
                        <span class="tag">Recommended for ${genre}</span>
                        <span class="tag">Popular choice</span>
                    `;
                } else {
                    recommendationsBox.style.display = 'none';
                }
            }

            updateSubGenreOptions(genre) {
                // This would filter sub-genres based on main genre
                // For now, just show all options
            }

            validateCurrentStep() {
                const requiredFields = this.getRequiredFieldsForStep(this.currentStep);
                const isValid = requiredFields.every(fieldId => {
                    const field = document.getElementById(fieldId);
                    return field && field.value.trim() !== '';
                });

                // Update next button state
                const nextBtn = document.getElementById('next-btn');
                const submitBtn = document.getElementById('submit-btn');
                
                if (this.currentStep === this.maxSteps) {
                    submitBtn.disabled = !isValid;
                } else {
                    nextBtn.disabled = !isValid;
                }

                return isValid;
            }

            getRequiredFieldsForStep(step) {
                const requiredFields = {
                    1: ['title', 'genre', 'length'],
                    2: ['structure', 'pov'],
                    3: ['main_character_role', 'world_type'],
                    4: ['writing_style', 'tone'],
                    5: ['age_group', 'audience_type', 'publication_route'],
                    6: ['ai_assistance_level']
                };
                return requiredFields[step] || [];
            }

            nextStep() {
                if (this.validateCurrentStep() && this.currentStep < this.maxSteps) {
                    this.collectStepData();
                    this.currentStep++;
                    this.updateStepDisplay();
                }
            }

            prevStep() {
                if (this.currentStep > 1) {
                    this.currentStep--;
                    this.updateStepDisplay();
                }
            }

            goToStep(stepNum) {
                this.collectStepData();
                this.currentStep = stepNum;
                this.updateStepDisplay();
            }

            updateStepDisplay() {
                // Update step indicator
                document.querySelectorAll('.step').forEach((step, index) => {
                    const stepNum = index + 1;
                    step.classList.remove('active', 'completed');
                    
                    if (stepNum === this.currentStep) {
                        step.classList.add('active');
                    } else if (stepNum < this.currentStep) {
                        step.classList.add('completed');
                    }
                });

                // Update step panels
                document.querySelectorAll('.step-panel').forEach((panel, index) => {
                    panel.classList.remove('active');
                    if (index + 1 === this.currentStep) {
                        panel.classList.add('active');
                    }
                });

                // Update navigation buttons
                const prevBtn = document.getElementById('prev-btn');
                const nextBtn = document.getElementById('next-btn');
                const submitBtn = document.getElementById('submit-btn');

                prevBtn.style.display = this.currentStep > 1 ? 'block' : 'none';
                nextBtn.style.display = this.currentStep < this.maxSteps ? 'block' : 'none';
                submitBtn.style.display = this.currentStep === this.maxSteps ? 'block' : 'none';

                // Validate current step
                this.validateCurrentStep();
            }

            collectStepData() {
                const currentPanel = document.querySelector(`.step-panel[data-step="${this.currentStep}"]`);
                const fields = currentPanel.querySelectorAll('input, select, textarea');
                
                fields.forEach(field => {
                    if (field.type === 'checkbox') {
                        if (!this.formData[field.name]) {
                            this.formData[field.name] = [];
                        }
                        if (field.checked) {
                            this.formData[field.name].push(field.value);
                        }
                    } else {
                        this.formData[field.name] = field.value;
                    }
                });
            }

            async submitForm() {
                // Collect final step data
                this.collectStepData();

                // Show loading state
                document.querySelector('.wizard').style.display = 'none';
                document.getElementById('loading').style.display = 'block';

                try {
                    const response = await fetch(`${this.apiBaseUrl}/books/create`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(this.formData)
                    });

                    if (response.ok) {
                        const result = await response.json();
                        this.showSuccess(result);
                    } else {
                        throw new Error('Failed to create book plan');
                    }
                } catch (error) {
                    console.error('Submit error:', error);
                    alert('Failed to create book plan. Please try again.');
                    document.querySelector('.wizard').style.display = 'block';
                    document.getElementById('loading').style.display = 'none';
                }
            }

            showSuccess(result) {
                document.getElementById('loading').style.display = 'none';
                document.getElementById('success').style.display = 'block';
                
                // Redirect after 3 seconds
                setTimeout(() => {
                    window.location.href = `/dashboard?book_id=${result.book_id}`;
                }, 3000);
            }

            isStepCompleted(stepNum) {
                const requiredFields = this.getRequiredFieldsForStep(stepNum);
                return requiredFields.every(fieldId => {
                    return this.formData[fieldId] && this.formData[fieldId] !== '';
                });
            }
        }

        // Initialize the wizard when page loads
        document.addEventListener('DOMContentLoaded', () => {
            new BookPlannerWizard();
        });
    </script>
</body>

</html>